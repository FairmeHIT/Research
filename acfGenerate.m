%The function can be used to generate the temporal autocorrelation functions 
%according to Lemma1 and Lemma3 in the manuscript:

%Huafu Li, Yang Wang, Chenyang Sun, and Zhenyong Wang, "User-Centric
%Cell-Free Massive MIMO for IoT in Highly Dynamic Environments", submitted
%to IoTJ on May 29th, 2023.

%Input:
% K -> Number of UEs for the cell-free systems
% L -> Number of APs  
% fDTs -> Normalized Doppler shift of UE, [K×1] vector 
% S -> Number of sysmbols
% rFactor -> Rician factor for (k,l) link, [K×L] matrix
% Garma -> Movement direction of UEs, [K×1] vector
% Theta -> azimuth angle for (k,l) link, [K×L] matrix
% kappa_T -> AoD spread control parameter for (k,l) link, [K×L] matrix

%Output:
% ACF_1 -> ACF generated by Lemma1, [K×L×S] matrix 
% ACF_2 -> ACF generated by Lemma3, [K×L×S] matrix  

function [ACF_1, ACF_2] = acfGenerate(K,L,fDTs,S,rFactor,Garma,Theta,kappa_T)
 
%Prepare to store  
ACF_1 = zeros(K,L,S);
ACF_2 = zeros(K,L,S); 

a = 2*pi*fDTs*(1:S); 

for k = 1:K  
    for l = 1:L
        %for Eq.(11)
        rho2_1 = (rFactor(k,l)/(rFactor(k,l)+1)) * exp(1i*a*cos(Garma(k) - Theta(k,l)));
        %for Eq.(5)
        rho1 = besseli(0, sqrt( - a.^2 + kappa_T(k,l)^2 + ...
            1i*2*a*kappa_T(k,l)*cos(Garma(k) - Theta(k,l)))) ./ besseli(0, kappa_T(k,l)); 
        %for Eq.(11)
        rho2_2 = (1/(rFactor(k,l)+1)) * rho1;   
        ACF_1(k,l,:) = rho1;  
        %for Eq.(11)
        ACF_2(k,l,:) = rho2_1.' + rho2_2.';   
    end 
end

end